openapi: "3.1.0"
info:
  version: "0.1.0"
  title: "Matchmaker"

paths:
  "/games/{gameId}/matches":
    post:
      operationId: createMatch
      summary: "Start looking for a match"
      description: |
        The request can take some time before completing
        and can be retried immediately if match not found.
      security:
        - playerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/GameId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMatchRequest"
      responses:
        "200":
          description: "Match created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "404":
          description: |
            No match found.
            There aren't any compatible players looking for a match currently.
        "429":
          description: |
            Too many requests.
            The player must wait before requesting another match.

  "/games/{gameId}/matches/{matchId}/outcome":
    put:
      summary: "Set match outcome"
      operationId: "setMatchOutcome"
      security:
        - serverAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/GameId"
        - in: "path"
          name: "matchId"
          required: true
          schema:
            $ref: "#/components/schemas/MatchId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchOutcome"
      responses:
        "200":
          description: "Match results accepted"
        "409":
          description: "Match results already accepted"

components:
  securitySchemes:
    playerAuth:
      type: http
      scheme: bearer
      description: "Authenticates the player"
    serverAuth:
      type: http
      scheme: bearer
      description: "Authenticates the game server"

  schemas:
    GameId:
      type: string

    PlayerId:
      type: string

    MatchId:
      type: string
      format: JWT

    Match:
      type: object
      required:
        - matchId
      properties:
        matchId:
          $ref: "#/components/schemas/MatchId"

    CreateMatchRequest:
      type: object
      required:
        - modes
      properties:
        modes:
          type: array
          items:
            type: string
          description: |
            Game modes and/or maps the player wants to play.
            Interpretation of these strings depends on the game implementation.
      example:
        modes:
          - "de_dust2"
          - "de_inferno"
          - "cs_office"

    MatchOutcome:
      type: object
      required:
        - matchId
        - scores
      properties:
        matchId:
          $ref: "#/components/schemas/MatchId"
        scores:
          type: array
          items:
            type: object
            required:
              - playerId
              - score
            properties:
              playerId:
                $ref: "#/components/schemas/PlayerId"
              score:
                type: number
