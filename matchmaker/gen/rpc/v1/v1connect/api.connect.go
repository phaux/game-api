// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/v1/api.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/phaux/game-api/matchmaker/gen/rpc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MatchmakerServiceName is the fully-qualified name of the MatchmakerService service.
	MatchmakerServiceName = "rpc.v1.MatchmakerService"
)

// MatchmakerServiceClient is a client for the rpc.v1.MatchmakerService service.
type MatchmakerServiceClient interface {
	FindMatch(context.Context, *connect_go.Request[v1.FindMatchRequest]) (*connect_go.Response[v1.FindMatchResponse], error)
	ReportMatchResult(context.Context, *connect_go.Request[v1.ReportMatchResultRequest]) (*connect_go.Response[v1.ReportMatchResultResponse], error)
}

// NewMatchmakerServiceClient constructs a client for the rpc.v1.MatchmakerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMatchmakerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MatchmakerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &matchmakerServiceClient{
		findMatch: connect_go.NewClient[v1.FindMatchRequest, v1.FindMatchResponse](
			httpClient,
			baseURL+"/rpc.v1.MatchmakerService/FindMatch",
			opts...,
		),
		reportMatchResult: connect_go.NewClient[v1.ReportMatchResultRequest, v1.ReportMatchResultResponse](
			httpClient,
			baseURL+"/rpc.v1.MatchmakerService/ReportMatchResult",
			opts...,
		),
	}
}

// matchmakerServiceClient implements MatchmakerServiceClient.
type matchmakerServiceClient struct {
	findMatch         *connect_go.Client[v1.FindMatchRequest, v1.FindMatchResponse]
	reportMatchResult *connect_go.Client[v1.ReportMatchResultRequest, v1.ReportMatchResultResponse]
}

// FindMatch calls rpc.v1.MatchmakerService.FindMatch.
func (c *matchmakerServiceClient) FindMatch(ctx context.Context, req *connect_go.Request[v1.FindMatchRequest]) (*connect_go.Response[v1.FindMatchResponse], error) {
	return c.findMatch.CallUnary(ctx, req)
}

// ReportMatchResult calls rpc.v1.MatchmakerService.ReportMatchResult.
func (c *matchmakerServiceClient) ReportMatchResult(ctx context.Context, req *connect_go.Request[v1.ReportMatchResultRequest]) (*connect_go.Response[v1.ReportMatchResultResponse], error) {
	return c.reportMatchResult.CallUnary(ctx, req)
}

// MatchmakerServiceHandler is an implementation of the rpc.v1.MatchmakerService service.
type MatchmakerServiceHandler interface {
	FindMatch(context.Context, *connect_go.Request[v1.FindMatchRequest]) (*connect_go.Response[v1.FindMatchResponse], error)
	ReportMatchResult(context.Context, *connect_go.Request[v1.ReportMatchResultRequest]) (*connect_go.Response[v1.ReportMatchResultResponse], error)
}

// NewMatchmakerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMatchmakerServiceHandler(svc MatchmakerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/rpc.v1.MatchmakerService/FindMatch", connect_go.NewUnaryHandler(
		"/rpc.v1.MatchmakerService/FindMatch",
		svc.FindMatch,
		opts...,
	))
	mux.Handle("/rpc.v1.MatchmakerService/ReportMatchResult", connect_go.NewUnaryHandler(
		"/rpc.v1.MatchmakerService/ReportMatchResult",
		svc.ReportMatchResult,
		opts...,
	))
	return "/rpc.v1.MatchmakerService/", mux
}

// UnimplementedMatchmakerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMatchmakerServiceHandler struct{}

func (UnimplementedMatchmakerServiceHandler) FindMatch(context.Context, *connect_go.Request[v1.FindMatchRequest]) (*connect_go.Response[v1.FindMatchResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.v1.MatchmakerService.FindMatch is not implemented"))
}

func (UnimplementedMatchmakerServiceHandler) ReportMatchResult(context.Context, *connect_go.Request[v1.ReportMatchResultRequest]) (*connect_go.Response[v1.ReportMatchResultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("rpc.v1.MatchmakerService.ReportMatchResult is not implemented"))
}
